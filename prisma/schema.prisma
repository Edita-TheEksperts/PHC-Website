generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          String        @id @default(uuid())
  name        String        @unique
  users       User[]        @relation("UserServices")
  subServices SubService[]  @relation("ServiceToSubService") // needs match
}

model SubService {
  id        String   @id @default(uuid())
  name      String   @unique
  serviceId String?  // still optional for now
  service   Service? @relation("ServiceToSubService", fields: [serviceId], references: [id]) // <-- fix added here
  users     User[]   @relation("UserSubServices")
}



model Schedule {
  id        Int    @id @default(autoincrement())
  day       String
  startTime String
  hours     Int
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}


model User {
  id                    String          @id @default(uuid())
  email                 String          @unique
  passwordHash          String
  role                  Role            @default(client)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Core info
  firstName             String?
  lastName              String?
  phone                 String?
  address               String
  postalCode            String?   
  languages             String?
  pets                  String?

  // Emergency
  emergencyContactName  String?
  emergencyContactPhone String?

  // Dates & Payment
  firstDate             DateTime?
  frequency             String
  duration              Int?
  paymentIntentId       String?
  totalPayment          Float?
  cardNumber            String?
  expiryDate            String?
  cvc                   String?

  // Service relations
  services              Service[]       @relation("UserServices")
  subServices           SubService[]    @relation("UserSubServices")
  schedules             Schedule[]

  // ✅ Form 1: Haushalt
  householdRooms        Int?
  householdPeople       Int?
  householdTasks        Json?
  form1Completed        Boolean?        @default(false)

  // ✅ Form 2: Freizeit & Soziale Aktivitäten
  mobility              String?
  transport             String?
  companionship         String?
  cooking               String?
  hasAllergies          String?
  allergyDetails        String?
  hasTech               String?
  reads                 String?
  playsCards            String?
  outings               String?
  form2Completed        Boolean?        @default(false)

  // ✅ Form 3: Gesundheitsführsorge
  height                String?
  weight                String?
  aids                  String?
  aidsOther             String?
  incontinence          String?
  communicationSehen    String?
  communicationHören    String?
  communicationSprechen String?
  foodSupport           String?
  basicCare             String?
  basicCareOther        String?
  healthActivities      String?
  healthActivitiesOther String?
  mentalSupport         String?
  mentalConditions      String?
  medicalFindings       String?
  form3Completed        Boolean?        @default(false)

  // ✅ Form 4: Alltagsbegleitung
  appointments          String?
  appointmentsOther     String?
  shoppingAssist        String?
  shoppingType          String?
  briefkasten           String?
  postfach              String?
  sonstige              String?
  form4Completed        Boolean?        @default(false)

  // Extra from registration
  allergies             String?
  specialRequests       String?
    reminders Reminder[]  // Add this line
assignments Assignment[]  // Add this line

}


model Reminder {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // "4h_reminder" or "48h_reminder"
  scheduledAt DateTime
  sent        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Assignment {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  status     String   @default("active") // active, completed, cancelled
  createdAt  DateTime @default(now())
}

model Feedback {
  id         String   @id @default(uuid())
  userId     String
  employeeId String
  comment    String
  rating     Int      // 1-5
  createdAt  DateTime @default(now())
}


model Employee {
  id                   String   @id @default(uuid())
  email                String   @unique
  salutation           String?
  firstName            String
  lastName             String
  phone                String?
  address              String?
  houseNumber          String?
  zipCode              String?
  city                 String?
  country              String?
  canton               String?     
  nationality          String?
  residencePermit      String?
  experienceYears      String
  experienceWhere      String?
  experienceCompany    String?
  hasLicense           Boolean
  licenseType          String?
  hasCar               String?
  carAvailableForWork  String?
  smoker               String?
  onCallAvailable      String?
  specialTrainings     String[]
  weekendReady         String?
  nightShifts          String?
  nightShiftFrequency  String?
  communicationTraits  String[]
  languages            String[]
  languageOther        String?
  dietaryExperience    String[]
  travelSupport        String?
  bodyCareSupport      String?
  hasAllergies         String?
  worksWithAnimals     String?
  howFarCanYouTravel   String?
  availabilityFrom     DateTime
  availabilityDays     String[]
  servicesOffered      String[]
  howDidYouHearAboutUs String?
  desiredWeeklyHours   String?
  passportFile        String?
visaFile            String?
policeLetterFile    String?
cvFile              String?
certificateFile     String?
drivingLicenceFile  String?
profilePhoto        String?
  status               String   @default("pending")
  createdAt            DateTime @default(now())
    password String?  // Add this if not present
iban           String?
accountHolder  String?
bankName       String?
bic            String?
assignments Assignment[]  // Add this line

}


enum Role {
  admin
  client
  employee
}

