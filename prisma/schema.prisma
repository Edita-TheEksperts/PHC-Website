generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserService")
}

model SubService {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserSubService")
}

model User {
  id                    String          @id @default(uuid())
  email                 String          @unique
  passwordHash          String
  role                  Role            @default(client)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  phone                 String?
  address               String
  frequency             String
  cardNumber            String?
  cvc                   String?
  duration              Int?
  emergencyContactName  String?
  emergencyContactPhone String?
  expiryDate            String?
  firstDate             DateTime?
  fullName              String?
  languages             String?
  pets                  String?
  serviceId             String?
  subServiceId          String?
  appointments          String?
  appointmentsOther     String?
  briefkasten           String?
  mobility              String?
  postfach              String?
  shoppingAssist        String?
  shoppingType          String?
  sonstige              String?
  transport             String?
  form4Completed        Boolean?        @default(false)
  healthQuestion        HealthQuestion? @relation("UserHealthQuestion")
  service               Service?        @relation("UserService", fields: [serviceId], references: [id])
  subService            SubService?     @relation("UserSubService", fields: [subServiceId], references: [id])
}

model HealthQuestion {
  id              String  @id @default(uuid())
  allergies       String?
  specialRequests String?
  userId          String  @unique
  user            User    @relation("UserHealthQuestion", fields: [userId], references: [id])
}

model Employee {
  id                   String   @id @default(uuid())
  email                String   @unique
  salutation           String?
  firstName            String
  lastName             String
  phone                String?
  address              String?
  houseNumber          String?
  zipCode              String?
  city                 String?
  country              String?
  residencePermit      String?
  experienceYears      String
  experienceWhere      String?
  experienceCompany    String?
  hasLicense           Boolean
  licenseType          String?
  hasCar               String?
  carAvailableForWork  String?
  smoker               String?
  onCallAvailable      String?
  specialTrainings     String[]
  weekendReady         String?
  nightShifts          String?
  nightShiftFrequency  String?
  communicationTraits  String[]
  languages            String[]
  languageOther        String?
  dietaryExperience    String[]
  travelSupport        String?
  bodyCareSupport      String?
  hasAllergies         String?
  worksWithAnimals     String?
  howFarCanYouTravel   String?
  availabilityFrom     DateTime
  availabilityDays     String[]
  servicesOffered      String[]
  howDidYouHearAboutUs String?
  desiredWeeklyHours   String?
  status               String   @default("pending")
  createdAt            DateTime @default(now())
}


enum Role {
  admin
  client
  employee
}

