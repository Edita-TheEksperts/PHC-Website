generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          String        @id @default(uuid())
  name        String        @unique
  users       User[]        @relation("UserService")
  subServices SubService[]  @relation("ServiceToSubService") // needs match
}

model SubService {
  id        String   @id @default(uuid())
  name      String   @unique
  serviceId String?  // still optional for now
  service   Service? @relation("ServiceToSubService", fields: [serviceId], references: [id]) // <-- fix added here
  users     User[]   @relation("UserSubService")
}



model Schedule {
  id        Int    @id @default(autoincrement())
  day       String
  startTime String
  hours     Int
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}


model User {
  id                    String          @id @default(uuid())
  email                 String          @unique
  passwordHash          String
  role                  Role            @default(client)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  phone                 String?
  address               String
  frequency             String
  cardNumber            String?
  cvc                   String?
  duration              Int?
  emergencyContactName  String?
  emergencyContactPhone String?
  expiryDate            String?
  firstDate             DateTime?
  firstName  String?  // new
  lastName   String?  // new
  languages             String?
  pets                  String?
  serviceId             String?
  subServiceId          String?
  appointments          String?
  appointmentsOther     String?
  briefkasten           String?
  mobility              String?
  postfach              String?
  shoppingAssist        String?
  shoppingType          String?
  sonstige              String?
  transport             String?
  form4Completed        Boolean?        @default(false)
  allergies             String?   // moved here
  specialRequests       String?   // moved here
  postalCode            String?   
  schedules Schedule[]
  service               Service?        @relation("UserService", fields: [serviceId], references: [id])
  subService            SubService?     @relation("UserSubService", fields: [subServiceId], references: [id])
  totalPayment        Float?   // <-- add this line
  paymentIntentId  String?  // nullable if you want

}



model Employee {
  id                   String   @id @default(uuid())
  email                String   @unique
  salutation           String?
  firstName            String
  lastName             String
  phone                String?
  address              String?
  houseNumber          String?
  zipCode              String?
  city                 String?
  country              String?
  canton               String?     
  nationality          String?
  residencePermit      String?
  experienceYears      String
  experienceWhere      String?
  experienceCompany    String?
  hasLicense           Boolean
  licenseType          String?
  hasCar               String?
  carAvailableForWork  String?
  smoker               String?
  onCallAvailable      String?
  specialTrainings     String[]
  weekendReady         String?
  nightShifts          String?
  nightShiftFrequency  String?
  communicationTraits  String[]
  languages            String[]
  languageOther        String?
  dietaryExperience    String[]
  travelSupport        String?
  bodyCareSupport      String?
  hasAllergies         String?
  worksWithAnimals     String?
  howFarCanYouTravel   String?
  availabilityFrom     DateTime
  availabilityDays     String[]
  servicesOffered      String[]
  howDidYouHearAboutUs String?
  desiredWeeklyHours   String?
  passportFile        String?
visaFile            String?
policeLetterFile    String?
cvFile              String?
certificateFile     String?
drivingLicenceFile  String?
profilePhoto        String?
  status               String   @default("pending")
  createdAt            DateTime @default(now())
    password String?  // Add this if not present
iban           String?
accountHolder  String?
bankName       String?
bic            String?

}


enum Role {
  admin
  client
  employee
}

